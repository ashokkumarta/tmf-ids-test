<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:camel="http://camel.apache.org/schema/spring"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
          http://camel.apache.org/schema/spring
          http://camel.apache.org/schema/spring/camel-spring.xsd">

	<camel:sslContextParameters id="sslContext"
		certAlias="1.0.1">
		<camel:keyManagers keyPassword="password">
			<camel:keyStore resource="etc/ran-regulator.p12"
				password="password" />
		</camel:keyManagers>
		<camel:trustManagers>
			<camel:keyStore resource="etc/truststore.p12"
				password="password" />
		</camel:trustManagers>
	</camel:sslContextParameters>

	<bean id="ArtifactRequestCreationProcessor"
		class="de.fhg.aisec.ids.camel.idscp2.processors.ArtifactRequestCreationProcessor" />
	<bean id="ContractRequestProcessor"
		class="de.fhg.aisec.ids.camel.idscp2.processors.ContractRequestProcessor" />
	<bean id="ContractAgreementReceiverProcessor"
		class="de.fhg.aisec.ids.camel.idscp2.processors.ContractAgreementReceiverProcessor" />
	<bean id="TypeExtractionProcessor"
		class="de.fhg.aisec.ids.camel.idscp2.processors.IdsMessageTypeExtractionProcessor" />
	<bean id="TMFArtifactResponseProcessor"
		class="tmf.ids.processors.TMFArtifactResponseProcessor" />
	<bean id="TMFArtifactInitProcessor"
		class="tmf.ids.processors.TMFArtifactInitProcessor" />
	<bean id="ContractRequestCreationProcessor"
		class="de.fhg.aisec.ids.camel.idscp2.processors.ContractRequestCreationProcessor" />
	<bean id="ContractResponseProcessor"
		class="de.fhg.aisec.ids.camel.idscp2.processors.ContractResponseProcessor" />

	<camelContext
		xmlns="http://camel.apache.org/schema/spring">

		<route id="usage-data-server">
			<from
				uri="idscp2server://0.0.0.0:29292?sslContextParameters=#sslContext&amp;useIdsMessages=true" />
			<process ref="TypeExtractionProcessor" />
			<choice>
				<when>
					<simple>${exchangeProperty.ids-type} == 'ContractRequestMessage'</simple>
					<log
						message="### USAGE DATA - Received request to 'request for contract' ###" />
					<setProperty name="artifactUri">
						<constant>https://catalyst.tmf/ran-share/usage-data</constant>
					</setProperty>
					<process ref="TMFArtifactInitProcessor" />

					<log
						message="### USAGE DATA - Initiating Contract Request ###" />

					<process ref="ContractRequestCreationProcessor" />
				</when>
				<when>
					<simple>${exchangeProperty.ids-type} == 'ContractResponseMessage'</simple>

					<log message="### USAGE DATA - Handling Contract Response - ContractResponseMessage ###" />
					<process ref="ContractResponseProcessor" />
				</when>
				<when>
					<simple>${exchangeProperty.ids-type} == 'ArtifactRequestMessage'</simple>
					<log
						message="### USAGE DATA - Handling request to 'Request for Usage Data' ###" />

					<setProperty name="artifactUri">
						<constant>https://catalyst.tmf/ran-share/usage-data</constant>
					</setProperty>

					<process ref="ArtifactRequestCreationProcessor" />
					<log
						message="USAGE DATA - Sending request for usage data" />
				</when>
				<when>
					<simple>${exchangeProperty.ids-type} == 'ArtifactResponseMessage'</simple>
					<log message="USAGE DATA - Received usage data" />

					<log message="USAGE DATA - Processing..." />


					<setHeader name="CamelHttpMethod">
						<constant>POST</constant>
					</setHeader>
					<setHeader name="content-type">
						<simple>text/plain</simple>
					</setHeader>
					<to
						uri="http://usage-data-processor:9192?awaitResponse=true" />
					<log message="USAGE DATA - Proecssing complete." />

					<!-- Set body to null after data transfer -->
					<removeHeader headerName="idscp2-header" />
					<setBody>
						<simple>${null}</simple>
					</setBody>
				</when>
				<otherwise>
					<log loggingLevel="ERROR"
						message="### USAGE DATA - Server received unexpected message (otherwise branch):\n${body}\n### Header: ###\n${headers[idscp2-header]}" />
					<removeHeader headerName="idscp2-header" />
					<setBody>
						<simple>${null}</simple>
					</setBody>
				</otherwise>
			</choice>
		</route>



		<route id="recommendations-server">
			<from
				uri="idscp2server://0.0.0.0:29291?sslContextParameters=#sslContext&amp;useIdsMessages=true" />
			<process ref="TypeExtractionProcessor" />
			<choice>
				<when>
					<simple>${exchangeProperty.ids-type} == 'ContractRequestMessage'</simple>

					<log
						message="### RECOMMENDATIONS - Initializing Recommendations artifact trust ###" />
					<setProperty name="artifactUri">
						<constant>https://catalyst.tmf/ran-share/recommendations</constant>
					</setProperty>
					<process ref="TMFArtifactInitProcessor" />

					<log
						message="### RECOMMENDATIONS - Handling Contract Request Message ###" />
					<setProperty name="containerUri">
						<constant>https://hub.docker.com/layers/ashokkumarta/recommendations-processor-app/latest/images/sha256-9d64aba44f76c8d43ce215b391a0467fb13a171980896b45e26e25eae044fc82#9191</constant>
					</setProperty>
					<process ref="ContractRequestProcessor" />
				</when>
				<when>
					<simple>${exchangeProperty.ids-type} == 'ContractAgreementMessage'</simple>
					<log
						message="### RECOMMENDATIONS - Handling Contract Agreement Message ###" />
					<!-- Only processing of incoming request must be performed, no reply -->
					<process ref="ContractAgreementReceiverProcessor" />
					<removeHeader headerName="idscp2-header" />
					<setBody>
						<simple>${null}</simple>
					</setBody>
				</when>
				<when>
					<simple>${exchangeProperty.ids-type} == 'ArtifactRequestMessage'</simple>

					<log
						message="RECOMMENDATIONS - Received request for recommendations..." />

					<log
						message="RECOMMENDATIONS - Invoking regulator-recommendations app to get recommendation..." />
					<to
						uri="http://regulator-recommendations:9901?awaitResponse=true" />

					<log
						message="RECOMMENDATIONS - Pushing recommendations as payload in IDS message ..." />
					<setProperty name="tmf_content_pay_load">
						<simple>${bodyAs(String)}</simple>
					</setProperty>

					<setProperty name="artifactUri">
						<constant>https://catalyst.tmf/ran-share/recommendations</constant>
					</setProperty>

					<log message="RECOMMENDATIONS - Sending recommendation..." />
					<process ref="TMFArtifactResponseProcessor" />

					<log
						message="RECOMMENDATIONS - Recommendation sent successfully: ${body}" />

				</when>
				<otherwise>
					<log loggingLevel="ERROR"
						message="### RECOMMENDATIONS - Server received unexpected message (otherwise branch):\n${body}\n### Header: ###\n${headers[idscp2-header]}" />
					<removeHeader headerName="idscp2-header" />
					<setBody>
						<simple>${null}</simple>
					</setBody>
				</otherwise>
			</choice>
		</route>

	</camelContext>

</beans>
