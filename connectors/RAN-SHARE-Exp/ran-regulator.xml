<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:camel="http://camel.apache.org/schema/spring"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
          http://camel.apache.org/schema/spring
          http://camel.apache.org/schema/spring/camel-spring.xsd">

	<camel:sslContextParameters id="sslContext"
		certAlias="1.0.1">
		<camel:keyManagers keyPassword="password">
			<camel:keyStore resource="etc/ran-regulator.p12"
				password="password" />
		</camel:keyManagers>
		<camel:trustManagers>
			<camel:keyStore resource="etc/truststore.p12"
				password="password" />
		</camel:trustManagers>
	</camel:sslContextParameters>


	<bean id="TMFArtifactResponseProcessor"
		class="tmf.ids.processors.TMFArtifactResponseProcessor" />
	<bean id="ContractRequestProcessor"
		class="de.fhg.aisec.ids.camel.idscp2.processors.ContractRequestProcessor" />
	<bean id="ContractAgreementReceiverProcessor"
		class="de.fhg.aisec.ids.camel.idscp2.processors.ContractAgreementReceiverProcessor" />
	<bean id="TypeExtractionProcessor"
		class="de.fhg.aisec.ids.camel.idscp2.processors.IdsMessageTypeExtractionProcessor" />

	<camelContext
		xmlns="http://camel.apache.org/schema/spring">


		<route id="recommendations_contract">
			<from
				uri="idscp2server://0.0.0.0:29292?sslContextParameters=#sslContext&amp;useIdsMessages=true" />

			<process ref="TypeExtractionProcessor" />
			<choice>
				<when>
					<simple>${exchangeProperty.ids-type} == 'ContractRequestMessage'</simple>
					<log message="### Handle ContractRequestMessage ###" />
					<setProperty name="containerUri">
						<constant>https://hub.docker.com/layers/jmalloc/echo-server/latest/images/sha256-c461e7e54d947a8777413aaf9c624b4ad1f1bac5d8272475da859ae82c1abd7d#8080</constant>
					</setProperty>
					<process ref="ContractRequestProcessor" />
				</when>
				<when>
					<simple>${exchangeProperty.ids-type} == 'ContractAgreementMessage'</simple>
					<log message="### Handle ContractAgreementMessage ###" />
					<!-- Only processing of incoming request must be performed, no reply -->
					<process ref="ContractAgreementReceiverProcessor" />
					<removeHeader headerName="idscp2-header" />
					<setBody>
						<simple>${null}</simple>
					</setBody>
				</when>
				<otherwise>
					<log loggingLevel="ERROR"
						message="### Server received unexpected message (otherwise branch):\n${body}\n### Header: ###\n${headers[idscp2-header]}" />
					<removeHeader headerName="idscp2-header" />
					<setBody>
						<simple>${null}</simple>
					</setBody>
				</otherwise>
			</choice>
		</route>


		<route id="recommendations">
			<from
				uri="timer://thirtySecondsTimer?fixedRate=true&amp;period=30000&amp;delay=30000" />

			<log message="Computing recommendations for MNO's..." />
			<to uri="http://regulator-recommendations:9901?awaitResponse=true" />

            <setProperty name="tmf_content_pay_load">
                <simple>${bodyAs(String)}</simple>
            </setProperty>
            
			<process ref="TMFArtifactResponseProcessor" />

			<log
				message="Sending recommendations data to all connected MNO's: ${body}" />
			<to
				uri="idscp2server://0.0.0.0:29292?sslContextParameters=#sslContext&amp;useIdsMessages=true" />

			<!-- Set body to null after data transfer -->
			<setBody>
				<simple>${null}</simple>
			</setBody>
		</route>

		<route id="usage-data">
			<from
				uri="idscp2server://0.0.0.0:29291?sslContextParameters=#sslContext" />
			<log message="Regulator - Received usage data: ${body}" />

			<log message="Regulator - processing the usage data..." />
			<log message="Regulator - Proecssing complete." />
		</route>

	</camelContext>

</beans>
